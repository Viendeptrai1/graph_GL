{
  "meta": {
    "title": "GraphQL & RestFul API trong Spring Boot",
    "course": "LẬP TRÌNH WEB (WEBPR330479)",
    "department": "Khoa CNTT - Bộ môn CNPM",
    "lecturer": "ThS. Nguyễn Hữu Trung",
    "source_pdf": "GraphQL Slide 1.pdf",
    "created_from": "user-uploaded PDF",
    "created_at": "2025-09-24T12:38:03",
    "language": "vi-VN",
    "notes": "Một số slide chứa hình/ảnh minh họa nên không có văn bản; đã đánh dấu image_only=true."
  },
  "sections": [
    {
      "key": "intro_graphql",
      "title": "Giới thiệu GraphQL",
      "slide_refs": [
        3,
        4
      ],
      "bullets": [
        "GraphQL là ngôn ngữ truy vấn và thao tác dữ liệu mã nguồn mở cho API (từ Facebook năm 2012).",
        "Cho phép client xác định chính xác dữ liệu cần lấy; tránh lấy thừa/thiếu.",
        "Hỗ trợ tổng hợp dữ liệu từ nhiều nguồn thông qua một endpoint duy nhất.",
        "Sử dụng hệ thống kiểu (type system) để mô tả dữ liệu và ràng buộc hợp lệ."
      ],
      "links": [
        "https://graphql.org/"
      ]
    },
    {
      "key": "benefits",
      "title": "Đặc trưng/Lợi ích chính của GraphQL",
      "slide_refs": [
        5,
        6,
        7
      ],
      "bullets": [
        "Trả về đúng dữ liệu được yêu cầu trong một request; kết quả có thể dự đoán.",
        "Có thể nhận nhiều dữ liệu (quan hệ) trong một request duy nhất, phù hợp mạng chậm.",
        "Dùng type system mô tả những gì API có thể cung cấp; lỗi được trình bày rõ ràng."
      ]
    },
    {
      "key": "similarities",
      "title": "GraphQL & REST – Điểm tương đồng",
      "slide_refs": [
        8
      ],
      "bullets": [
        "Đều cho phép thao tác CRUD qua API.",
        "Client gửi yêu cầu đến endpoint(s), server trả về dữ liệu/trạng thái/mã lỗi.",
        "Cùng phi trạng thái (stateless), mô hình client–server.",
        "Đều dựa trên tài nguyên (resource-oriented), hỗ trợ JSON, và có thể cache.",
        "Trung lập ngôn ngữ và cơ sở dữ liệu."
      ]
    },
    {
      "key": "differences",
      "title": "GraphQL & REST – Khác nhau",
      "slide_refs": [
        9
      ],
      "bullets": [
        "Endpoint: REST có nhiều endpoint theo tài nguyên; GraphQL thường chỉ một endpoint.",
        "Cấu trúc dữ liệu trả về: REST do server ấn định; GraphQL do client định nghĩa.",
        "Định kiểu: REST kiểu yếu; GraphQL kiểu mạnh (schema/type rõ ràng).",
        "Kiểm tra lỗi: REST dựa vào HTTP codes; GraphQL xác thực theo schema và trả về lỗi có cấu trúc."
      ]
    },
    {
      "key": "what_graphql_fixes",
      "title": "Hạn chế REST mà GraphQL khắc phục",
      "slide_refs": [
        11
      ],
      "bullets": [
        "Cấu trúc phản hồi cố định khiến khó tùy biến theo nhu cầu thực tế.",
        "Overfetching và Underfetching: trả về quá nhiều hoặc thiếu dữ liệu → cần nhiều request."
      ]
    },
    {
      "key": "when_to_use",
      "title": "Khi nào nên dùng GraphQL hay REST",
      "slide_refs": [
        12
      ],
      "bullets": [
        "GraphQL phù hợp khi băng thông giới hạn và muốn giảm số request.",
        "Cần hợp nhất nhiều nguồn dữ liệu tại một endpoint.",
        "Nhiều loại client với yêu cầu dữ liệu rất khác nhau."
      ]
    },
    {
      "key": "spring_boot",
      "title": "GraphQL và REST trong Spring Boot",
      "slide_refs": [
        13
      ],
      "image_only": true,
      "bullets": [
        "Minh họa tích hợp GraphQL/REST trong Spring Boot (sơ đồ/hình)."
      ]
    },
    {
      "key": "examples",
      "title": "Ví dụ thao tác Product",
      "slide_refs": [
        16
      ],
      "bullets": [
        "Slide minh họa tạo Product (Create)."
      ]
    }
  ],
  "glossary": {
    "GraphQL": "Ngôn ngữ truy vấn cho API, giúp client chỉ định chính xác dữ liệu cần lấy.",
    "REST": "Phong cách kiến trúc web service dựa trên tài nguyên, thường nhiều endpoint.",
    "Overfetching": "Trả về nhiều dữ liệu hơn mức client cần.",
    "Underfetching": "Trả về thiếu dữ liệu, buộc client phải gọi thêm nhiều request.",
    "Type System": "Lược đồ (schema) mô tả type, field và quan hệ, đảm bảo tính đúng đắn truy vấn."
  },
  "faq": [
    {
      "q": "GraphQL có thay thế REST hoàn toàn không?",
      "a": "Không nhất thiết. Tùy bài toán, có thể dùng thay thế hoặc kết hợp REST và GraphQL."
    },
    {
      "q": "Vì sao GraphQL chỉ cần một endpoint?",
      "a": "Vì truy vấn mô tả chính xác dữ liệu cần lấy; server thực hiện resolve dữ liệu theo schema."
    }
  ]
}